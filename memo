Base on flask-sqlalchemy framework

database tables are built by sqlalchemy with model schema defined in sqlalchemy_model.py

In prep dictionary, jsparse.py parse test.json file into a list of json object
then write_json_test_to_db.py write all json object to database to test

Sqlalchemy_model.py file defines all database table schemas
To_dict represent a model class in dictionary format.
Since sqlalchemy doesn't support Postgresql Geometry Point type, I'd to save coordinates in seperate columns
A hash and verify method in User class to encrypt user password

api_difinition.py
Use flask-restful library to simplify codes
A token_required decorator is defined to enable access control, which can check whether the token passed in is existed
in session table or expired
NewRecordApi -- Add a raw json list text data (from test.json) to database (which is used when inserting data from upload file)
ItemidsApi, PropertiesApi and CoordinateApi represent each section in ONE json record respectively, and cascade delete
is enable so that when one record from itemids is removed, related record form properties and coordinate table will
be removed, too

RegistrationApi -- user registration, with a json format data as payload
LoginApi -- user login, if succeed, return a token generated by itsdangerous library with timestamp, and also add
this token to session table(guess it should be a redis table in production)
SessionApi -- similar to token_required decorater, check whether the token exists or expired, delete token .etc
PropertiesRangeApi -- query database with OFFSET and LIMIT keywords, returning a concatenated json string


restful.py
fFask framework entry point and api url registration
uploading file codes are here without a http template. Anyway, check upload file exists and file format is supported
if yes, check upload filename with secure_filename, then save upload file to somewhere (e.g. /static/finemane)
use jsparse and write_json_test_to_db to read and parse file, then loop through json list and call NewRecordApi to add
to database